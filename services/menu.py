# --- Third-party libraries ---
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest
from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import Optional

# --- Internal modules ---
from services.config import format_supabase_summary
from services.database import get_user_data, update_user_data

async def update_last_menu_message_id(message_id: int, user_id: int):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–Ω—é.
    
    Args:
        message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    await update_user_data(user_id, {"last_menu_message_id": message_id})


async def get_last_menu_message_id(user_id: Optional[int]):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–Ω—é.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_id is None:
        return None
        
    user_data = await get_user_data(user_id)
    return user_data.get("last_menu_message_id")


def config_action_keyboard(active: bool) -> InlineKeyboardMarkup:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏.
    """
    toggle_text = "üî¥ Disable" if active else "üü¢ Enable"
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=toggle_text, callback_data="toggle_active"),
            InlineKeyboardButton(text="‚úèÔ∏è Profiles", callback_data="profiles_menu")
        ],
        [
            InlineKeyboardButton(text="‚ôªÔ∏è Reset", callback_data="reset_bought"),
            InlineKeyboardButton(text="‚öôÔ∏è Userbot", callback_data="userbot_menu")
        ],
        [
            InlineKeyboardButton(text="üí∞ Top up", callback_data="deposit_menu"),
            InlineKeyboardButton(text="‚Ü©Ô∏è Withdraw", callback_data="refund_menu")
        ],
        [
            InlineKeyboardButton(text="üéè Catalog", callback_data="catalog"),
            InlineKeyboardButton(text="‚ùì Help", callback_data="show_help")
        ]
    ])


async def update_menu(bot, chat_id: int, user_id: int, message_id: int):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –º–µ–Ω—é –≤ —á–∞—Ç–µ: —É–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ.
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase
    user_data = await get_user_data(user_id)
    active = user_data.get("active", False)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –º–µ–Ω—é –∏–∑ –¥–∞–Ω–Ω—ã—Ö Supabase
    menu_text = await format_supabase_summary(user_id)
    
    await delete_menu(bot=bot, chat_id=chat_id, user_id=user_id, current_message_id=message_id)
    await send_menu(bot=bot, chat_id=chat_id, text=menu_text, active=active, user_id=user_id)


async def delete_menu(bot, chat_id: int, user_id: int = None, current_message_id: int = None):
    """
    –£–¥–∞–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ.
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        chat_id: ID —á–∞—Ç–∞
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        current_message_id: ID —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    if user_id is None:
        return
        
    last_menu_message_id = await get_last_menu_message_id(user_id)
    if last_menu_message_id and last_menu_message_id != current_message_id:
        try:
            await bot.delete_message(chat_id=chat_id, message_id=last_menu_message_id)
        except TelegramBadRequest as e:
            error_text = str(e)
            if "message can't be deleted for everyone" in error_text:
                await bot.send_message(
                    chat_id,
                    "‚ö†Ô∏è The previous menu is outdated and cannot be deleted (more than 48 hours have passed). Use the current menu.\n"
                )
            elif "message to delete not found" in error_text:
                pass
            else:
                raise


async def send_menu(bot, chat_id: int, text: str, active: bool, user_id: int) -> int:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ –º–µ–Ω—é –≤ —á–∞—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        chat_id: ID —á–∞—Ç–∞
        text: –¢–µ–∫—Å—Ç –º–µ–Ω—é
        active: –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    sent = await bot.send_message(
        chat_id=chat_id,
        text=text,
        reply_markup=config_action_keyboard(active)
    )
    await update_last_menu_message_id(sent.message_id, user_id)
    return sent.message_id


def payment_keyboard(amount):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã –¥–ª—è –∏–Ω–≤–æ–π—Å–∞.
    """
    builder = InlineKeyboardBuilder()
    builder.button(text=f"Top up ‚òÖ{amount:,}", pay=True)
    return builder.as_markup()