# --- Standard libraries ---
import os
import logging
from typing import Optional, Dict, Any, List

# --- Third-party libraries ---
# –£–¥–∞–ª—è–µ–º aiofiles, —Ç–∞–∫ –∫–∞–∫ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏

# --- Internal modules ---
from services.database import get_user_data, update_user_data, get_user_profiles

logger = logging.getLogger(__name__)

CURRENCY = 'XTR'
VERSION = '1.0.0'
# –£–¥–∞–ª—è–µ–º CONFIG_PATH, —Ç–∞–∫ –∫–∞–∫ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª
DEV_MODE = False # Purchase of test gifts
MAX_PROFILES = 3 # Maximum message length is 4096 characters
PURCHASE_COOLDOWN = 0.3 # Number of purchases per second
USERBOT_UPDATE_COOLDOWN = 50 # Base waiting time in seconds for requesting gift list through userbot

def add_allowed_user(user_id):
    # –í –ø—É–±–ª–∏—á–Ω–æ–º —Ä–µ–∂–∏–º–µ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç
    pass

def DEFAULT_PROFILE(user_id: int) -> dict:
    """Creates a profile with default settings for the specified user."""
    return {
        "user_id": user_id,
        "name": None,
        "min_price": 5000,
        "max_price": 10000,
        "min_supply": 1000,
        "max_supply": 10000,
        "limit": 1000000,
        "count": 5,
        "target_user_id": user_id,
        "target_chat_id": None,
        "target_type": None,
        "sender": "bot",
        "bought": 0,
        "spent": 0,
        "done": False
    }

# –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ –Ω–æ–≤—ã–µ, —Ä–∞–±–æ—Ç–∞—é—â–∏–µ —Å Supabase

async def get_valid_config(user_id: int) -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º.
    """
    user_data = await get_user_data(user_id)
    profiles = await get_user_profiles(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —é–∑–µ—Ä–±–æ—Ç–∞ –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
    from services.database import get_user_userbot_data
    userbot_data = await get_user_userbot_data(user_id)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase –≤ —Ñ–æ—Ä–º–∞—Ç, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å–æ —Å—Ç–∞—Ä—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
    config = {
        "BALANCE": user_data.get("balance", 0),
        "ACTIVE": user_data.get("active", False),
        "LAST_MENU_MESSAGE_ID": user_data.get("last_menu_message_id"),
        "PROFILES": profiles if profiles else [DEFAULT_PROFILE(user_id)],
        "USERBOT": {
            "API_ID": userbot_data.get("api_id") if userbot_data else None,
            "API_HASH": userbot_data.get("api_hash") if userbot_data else None,
            "PHONE": userbot_data.get("phone") if userbot_data else None,
            "USER_ID": userbot_data.get("user_id") if userbot_data else None,
            "USERNAME": userbot_data.get("username") if userbot_data else None,
            "BALANCE": user_data.get("userbot_balance", 0),  # –ë–∞–ª–∞–Ω—Å —é–∑–µ—Ä–±–æ—Ç–∞ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ users
            "ENABLED": userbot_data.get("enabled", False) if userbot_data else False
        }
    }
    return config

async def save_config(config: dict):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ Supabase.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º.
    """
    if not config:
        logger.error("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É—Å—Ç–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å)
    profiles = config.get("PROFILES", [])
    if not profiles:
        logger.error("–ù–µ—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return
    
    profile = profiles[0]
    user_id = profile.get("user_id") or profile.get("TARGET_USER_ID")
    if not user_id:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å user_id")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = {
        "balance": config.get("BALANCE", 0),
        "active": config.get("ACTIVE", False),
        "last_menu_message_id": config.get("LAST_MENU_MESSAGE_ID"),
        "userbot_balance": config.get("USERBOT", {}).get("BALANCE", 0)  # –ë–∞–ª–∞–Ω—Å —é–∑–µ—Ä–±–æ—Ç–∞ –≤ users
    }
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase
    await update_user_data(user_id, user_data)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —é–∑–µ—Ä–±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
    userbot_data = config.get("USERBOT", {})
    if userbot_data:
        from services.database import update_user_userbot_data
        userbot_update_data = {
            "api_id": userbot_data.get("API_ID"),
            "api_hash": userbot_data.get("API_HASH"),
            "phone": userbot_data.get("PHONE"),
            "user_id": userbot_data.get("USER_ID"),
            "username": userbot_data.get("USERNAME"),
            "enabled": userbot_data.get("ENABLED", False)
        }
        await update_user_userbot_data(user_id, userbot_update_data)
    
    logger.info(f"Configuration saved in Supabase.")

async def format_supabase_summary(user_id: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –º–µ–Ω—é –∏–∑ –¥–∞–Ω–Ω—ã—Ö Supabase
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ—Ñ–∏–ª–∏
    user_data = await get_user_data(user_id)
    profiles = await get_user_profiles(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    balance = user_data.get("balance", 0)
    active = user_data.get("active", False)
    userbot_enabled = user_data.get("userbot_enabled", False)
    userbot_balance = user_data.get("userbot_balance", 0)
    
    logger.info(f"Formatting menu for user {user_id}: balance={balance}, active={active}, userbot_enabled={userbot_enabled}, userbot_balance={userbot_balance}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    status = "üü¢ ACTIVE" if active else "üî¥ INACTIVE"
    header = f"<b>‚òÖ BALANCE: {balance:,}</b> {CURRENCY}\n<b>STATUS: {status}</b>\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —é–∑–µ—Ä–±–æ—Ç–µ
    if userbot_enabled:
        userbot_info = f"\n<b>ü§ñ USERBOT:</b> ‚úÖ ACTIVE, ‚òÖ{userbot_balance:,}"
    else:
        userbot_info = "\n<b>ü§ñ USERBOT:</b> ‚ùå DISABLED"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª—è—Ö
    profiles_info = "\n\n<b>üìä PROFILES:</b>\n"
    for i, profile in enumerate(profiles, 1):
        target_display = get_target_display(profile, user_id)
        done = profile.get("done", False)
        count = profile.get("count", 0)
        bought = profile.get("bought", 0)
        limit = profile.get("limit", 0)
        spent = profile.get("spent", 0)
        sender = profile.get("sender", "bot")
        
        status_emoji = "‚úÖ" if done else "‚è≥"
        sender_emoji = "üë§" if sender == "bot" else "ü§ñ"
        
        profiles_info += (
            f"{i}. {status_emoji} {sender_emoji} <b>{target_display}</b>\n"
            f"   {bought}/{count} gifts, {spent:,}/{limit:,} ‚òÖ\n"
        )
    
    return header + userbot_info + profiles_info

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç config.json, –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏
def get_target_display(profile: dict, user_id: int) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–æ–¥–∞—Ä–∫–∞
    """
    target_user_id = profile.get("target_user_id")
    target_chat_id = profile.get("target_chat_id")
    return get_target_display_local(target_user_id, target_chat_id, user_id)

def get_target_display_local(target_user_id: Optional[int], target_chat_id: Optional[str], user_id: int) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–æ–¥–∞—Ä–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ ID –∏–ª–∏ username
    """
    if target_user_id == user_id:
        return "yourself"
    elif target_user_id:
        return f"user {target_user_id}"
    elif target_chat_id:
        if target_chat_id.lstrip('-').isdigit():
            return f"chat {target_chat_id}"
        else:
            return f"@{target_chat_id.lstrip('@')}"
    else:
        return "unknown"

# –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ load_config, ensure_config, validate_profile, validate_config,
# migrate_config_if_needed, add_profile, update_profile, remove_profile –∏ –¥—Ä.

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ handlers_wizard.py
async def add_profile(config: dict, profile_data: dict):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = profile_data.get("user_id")
    if not user_id:
        logger.error("user_id –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è")
        return False
    
    try:
        from services.database import add_user_profile
        result = await add_user_profile(user_id, profile_data)
        return result is not None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        return False

async def update_profile(config: dict, profile_index: int, profile_data: dict):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        from services.database import get_user_profiles, update_user_profile
        
        user_id = profile_data.get("user_id")
        if not user_id:
            logger.error("user_id –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        profiles = await get_user_profiles(user_id)
        
        if profile_index >= len(profiles):
            logger.error(f"–ò–Ω–¥–µ–∫—Å –ø—Ä–æ—Ñ–∏–ª—è {profile_index} –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ñ–∏–ª–µ–π")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        profile_id = profiles[profile_index].get("id")
        if not profile_id:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            return False
        
        result = await update_user_profile(profile_id, profile_data)
        return result is not None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        return False

async def remove_profile(config: dict, profile_index: int, user_id: int):
    """
    –£–¥–∞–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        from services.database import get_user_profiles, delete_user_profile
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        profiles = await get_user_profiles(user_id)
        
        if profile_index >= len(profiles):
            logger.error(f"–ò–Ω–¥–µ–∫—Å –ø—Ä–æ—Ñ–∏–ª—è {profile_index} –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ñ–∏–ª–µ–π")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        profile_id = profiles[profile_index].get("id")
        if not profile_id:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return False
        
        result = await delete_user_profile(profile_id)
        return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        return False
